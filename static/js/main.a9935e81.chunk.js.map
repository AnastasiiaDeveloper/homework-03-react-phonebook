{"version":3,"sources":["Components/ContactForm/ContactForm.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","Components/PhoneBook/PhoneBook.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","contactName","document","getElementById","value","contacts","this","props","some","contact","name","alert","contactPhone","push","id","v4","number","updateContacts","className","placeholder","onClick","addContact","Component","Filter","filterString","toLowerCase","filteredContacts","filter","includes","showFilteredContacts","setDefaultContacts","onChange","findContactByName","ContactList","map","deleteContact","PhoneBook","state","setState","localStorage","setItem","JSON","stringify","parse","getItem","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9935e81.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport v4  from 'uuid/dist/v4'\r\nimport  '../ContactForm/ContactForm.css'\r\n\r\n\r\nclass ContactForm extends Component {\r\n    addContact() {\r\n      const nameInput = document.getElementById('name')\r\n      const contactName = nameInput.value\r\n  \r\n      const contacts = this.props.contacts\r\n      if (contacts.some(contact => contact.name === contactName)) {\r\n        alert(`${contactName} is already in contacts.`)\r\n        return\r\n      }\r\n  \r\n      const phoneInput = document.getElementById('number')\r\n      const contactPhone = phoneInput.value\r\n  \r\n      contacts.push({\r\n        id: v4(),\r\n        name: contactName,\r\n        number: contactPhone\r\n      })\r\n  \r\n      this.props.updateContacts(contacts)\r\n    }\r\n  \r\n\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"border\">\r\n            <h2>Name</h2>\r\n            <input id=\"name\" placeholder=\"Enter name...\" />\r\n            <h2>Number</h2>\r\n            <input id=\"number\" placeholder=\"Enter number...\" />\r\n            <button onClick={() => this.addContact()}>Add contact</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default ContactForm;","import React, { Component } from \"react\";\r\n\r\nclass Filter extends Component {\r\n    findContactByName() {\r\n      const filterInput = document.getElementById('filter')\r\n      const filterString = filterInput.value.toLowerCase()\r\n  \r\n      if (!filterString) {\r\n        this.props.setDefaultContacts()\r\n        return\r\n      }\r\n  \r\n      const filteredContacts = this.props.contacts.filter(contact => contact.name.toLowerCase().includes(filterString))\r\n      this.props.showFilteredContacts(filteredContacts)\r\n    }\r\n    \r\n    render() {\r\n      return (\r\n        <div>\r\n          <h2>Find contacts by name</h2>\r\n          <input id=\"filter\" onChange={() => this.findContactByName()} />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  export default Filter;","import React from 'react';\r\n\r\nconst ContactList = props => {\r\n    return (\r\n      <ul>\r\n        {props.contacts.map(contact =>\r\n          <li>\r\n               {contact.name}: {contact.number} \r\n               <button onClick={() => props.deleteContact(contact.id)}> delete </button>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    )\r\n  }\r\n  \r\n  export default ContactList","import React, { Component } from 'react'\r\nimport v4  from 'uuid/dist/v4'\r\nimport ContactForm from '../ContactForm/ContactForm'\r\nimport Filter from '../Filter/Filter'\r\nimport ContactList from '../ContactList/ContactList'\r\n\r\n\r\n\r\nclass PhoneBook extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n    name: '',\r\n    number: '',\r\n  }\r\n// contacts =[]\r\n  contacts = this.state.contacts\r\n\r\n  componentDidMount() {\r\n    let contacts = JSON.parse(localStorage.getItem('contacts'))\r\n// если  в контактах ничего нет они заполняются дефолтными значениями\r\n    if (!contacts) {\r\n      contacts = [\r\n        { id: v4(), name: 'Rosie Simpson', number: '459-12-56' },\r\n        { id: v4(), name: 'Hermione Kline', number: '443-89-12' },\r\n        { id: v4(), name: 'Eden Clements', number: '645-17-79' },\r\n        { id: v4(), name: 'Annie Copeland', number: '227-91-26' },\r\n      ]\r\n    }\r\n\r\n    this.setState({ contacts })\r\n  }\r\n\r\n  updateContacts = contacts => {\r\n  //  обн мас коп состояние\r\n    this.contacts = contacts\r\n\r\n// обн состояние\r\n      this.setState({ contacts }) \r\n    localStorage.setItem('contacts', JSON.stringify(this.contacts))\r\n  }\r\n// при очищ поля для фильтрации мы показываем все контакты\r\n  setDefaultContacts = () => this.setState({ contacts: this.contacts })\r\n\r\n  showFilteredContacts = contacts => this.setState({ contacts })\r\n\r\n\r\n  \r\n  deleteContact = id =>{\r\n    this.setState({\r\n      contacts: this.state.contacts.filter(contact=> contact.id !== id)\r\n\r\n    });\r\n    \r\n    this.contacts=this.state.contacts;\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm\r\n          updateContacts={this.updateContacts}\r\n          contacts={this.state.contacts} />\r\n        <h1>Contacts</h1>\r\n        <Filter\r\n          setDefaultContacts={this.setDefaultContacts}\r\n          showFilteredContacts={this.showFilteredContacts}\r\n          contacts={this.contacts} />\r\n        <ContactList contacts={this.state.contacts} deleteContact={this.deleteContact} />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default PhoneBook","import React from 'react'\nimport PhoneBook from './Components/PhoneBook/PhoneBook'\n\nconst App =() =>\n    (\n    <>\n    <PhoneBook/>\n    </>\n  )\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()"],"sourceRoot":""}